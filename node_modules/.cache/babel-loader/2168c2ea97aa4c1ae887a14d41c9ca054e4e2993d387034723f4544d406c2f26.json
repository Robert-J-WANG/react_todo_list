{"ast":null,"code":"var _jsxFileName = \"/Users/aqiang/Desktop/My_Github/Upload/ReactProject/react_todo_list/src/components/List/index.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Item from '../Item';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class List extends Component {\n  render() {\n    /*父组件App把存储在state里的动态数据，通过设置props的方式，传递给子组件List*/\n    // 子组件List获取属性props的数据\n    const {\n      todolists,\n      updateTodo,\n      deleteTodo\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"todo-main\",\n      children: todolists.map(todolist => {\n        {/*组件List通过设置属性props，将数据传递给他的字组件Item*/}\n        {/*传递所有的props，使用{...todolist}*/}\n        return /*#__PURE__*/_jsxDEV(Item, {\n          ...todolist,\n          updateTodo: updateTodo,\n          deleteTodo: deleteTodo\n        }, todolist.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 20\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this);\n  }\n}\n// 对接收的props，进行类型和必要性的限制\nList.propTypes = {\n  todolists: PropTypes.array.isRequired,\n  updateTodo: PropTypes.func.isRequired\n};","map":{"version":3,"names":["React","Component","PropTypes","Item","jsxDEV","_jsxDEV","List","render","todolists","updateTodo","deleteTodo","props","className","children","map","todolist","id","fileName","_jsxFileName","lineNumber","columnNumber","propTypes","array","isRequired","func"],"sources":["/Users/aqiang/Desktop/My_Github/Upload/ReactProject/react_todo_list/src/components/List/index.jsx"],"sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Item from '../Item'\nimport './index.css'\n\nexport default class List extends Component {\n\n  // 对接收的props，进行类型和必要性的限制\n  static propTypes = {\n    todolists:PropTypes.array.isRequired,\n    updateTodo:PropTypes.func.isRequired,\n  }\n\n  \n  render() {\n    /*父组件App把存储在state里的动态数据，通过设置props的方式，传递给子组件List*/\n    // 子组件List获取属性props的数据\n    const {todolists, updateTodo, deleteTodo} =this.props\n\n    return (\n      <ul className=\"todo-main\">\n        {/*把属性数据遍历获取所有数据*/}\n        {/*在jsx文件在写JS代码，需要加花括号包裹一下*/}\n        {\n          todolists.map((todolist) => {\n            {/*组件List通过设置属性props，将数据传递给他的字组件Item*/}\n            {/*传递所有的props，使用{...todolist}*/}\n            return <Item  key={todolist.id} {...todolist} updateTodo={updateTodo} deleteTodo={deleteTodo}/>\n          })\n        }\n\t\t\t</ul>\n    )\n  }\n}\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,IAAI,MAAM,SAAS;AAC1B,OAAO,aAAa;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpB,eAAe,MAAMC,IAAI,SAASL,SAAS,CAAC;EAS1CM,MAAMA,CAAA,EAAG;IACP;IACA;IACA,MAAM;MAACC,SAAS;MAAEC,UAAU;MAAEC;IAAU,CAAC,GAAE,IAAI,CAACC,KAAK;IAErD,oBACEN,OAAA;MAAIO,SAAS,EAAC,WAAW;MAAAC,QAAA,EAIrBL,SAAS,CAACM,GAAG,CAAEC,QAAQ,IAAK;QAC1B,CAAC;QACD,CAAC;QACD,oBAAOV,OAAA,CAACF,IAAI;UAAA,GAAwBY,QAAQ;UAAEN,UAAU,EAAEA,UAAW;UAACC,UAAU,EAAEA;QAAW,GAA1EK,QAAQ,CAACC,EAAE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAgE,CAAC;MACjG,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEL,CAAC;EAEN;AACF;AA1BE;AAFmBd,IAAI,CAGhBe,SAAS,GAAG;EACjBb,SAAS,EAACN,SAAS,CAACoB,KAAK,CAACC,UAAU;EACpCd,UAAU,EAACP,SAAS,CAACsB,IAAI,CAACD;AAC5B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}