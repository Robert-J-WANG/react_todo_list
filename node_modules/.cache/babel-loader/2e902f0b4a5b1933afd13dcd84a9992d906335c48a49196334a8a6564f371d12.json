{"ast":null,"code":"import { urlAlphabet } from './url-alphabet/index.js';\nvar random = function random(bytes) {\n  return crypto.getRandomValues(new Uint8Array(bytes));\n};\nvar customRandom = function customRandom(alphabet, defaultSize, getRandom) {\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;\n  var step = -~(1.6 * mask * defaultSize / alphabet.length);\n  return function () {\n    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultSize;\n    var id = '';\n    while (true) {\n      var bytes = getRandom(step);\n      var j = step;\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || '';\n        if (id.length === size) return id;\n      }\n    }\n  };\n};\nvar customAlphabet = function customAlphabet(alphabet) {\n  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 21;\n  return customRandom(alphabet, size, random);\n};\nvar nanoid = function nanoid() {\n  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 21;\n  return crypto.getRandomValues(new Uint8Array(size)).reduce(function (id, byte) {\n    byte &= 63;\n    if (byte < 36) {\n      id += byte.toString(36);\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase();\n    } else if (byte > 62) {\n      id += '-';\n    } else {\n      id += '_';\n    }\n    return id;\n  }, '');\n};\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random };","map":{"version":3,"names":["urlAlphabet","random","bytes","crypto","getRandomValues","Uint8Array","customRandom","alphabet","defaultSize","getRandom","mask","Math","log","length","LN2","step","size","arguments","undefined","id","j","customAlphabet","nanoid","reduce","byte","toString","toUpperCase"],"sources":["/Users/aqiang/Desktop/My_Github/Upload/ReactProject/react_todo_list/node_modules/nanoid/index.browser.js"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,yBAAyB;AACrD,IAAIC,MAAM,GAAG,SAATA,MAAMA,CAAGC,KAAK;EAAA,OAAIC,MAAM,CAACC,eAAe,CAAC,IAAIC,UAAU,CAACH,KAAK,CAAC,CAAC;AAAA;AACnE,IAAII,YAAY,GAAG,SAAfA,YAAYA,CAAIC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,EAAK;EACvD,IAAIC,IAAI,GAAG,CAAC,CAAC,IAAKC,IAAI,CAACC,GAAG,CAACL,QAAQ,CAACM,MAAM,GAAG,CAAC,CAAC,GAAGF,IAAI,CAACG,GAAI,IAAI,CAAC;EAChE,IAAIC,IAAI,GAAG,CAAC,EAAG,GAAG,GAAGL,IAAI,GAAGF,WAAW,GAAID,QAAQ,CAACM,MAAM,CAAC;EAC3D,OAAO,YAAwB;IAAA,IAAvBG,IAAI,GAAAC,SAAA,CAAAJ,MAAA,QAAAI,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAGT,WAAW;IACxB,IAAIW,EAAE,GAAG,EAAE;IACX,OAAO,IAAI,EAAE;MACX,IAAIjB,KAAK,GAAGO,SAAS,CAACM,IAAI,CAAC;MAC3B,IAAIK,CAAC,GAAGL,IAAI;MACZ,OAAOK,CAAC,EAAE,EAAE;QACVD,EAAE,IAAIZ,QAAQ,CAACL,KAAK,CAACkB,CAAC,CAAC,GAAGV,IAAI,CAAC,IAAI,EAAE;QACrC,IAAIS,EAAE,CAACN,MAAM,KAAKG,IAAI,EAAE,OAAOG,EAAE;MACnC;IACF;EACF,CAAC;AACH,CAAC;AACD,IAAIE,cAAc,GAAG,SAAjBA,cAAcA,CAAId,QAAQ;EAAA,IAAES,IAAI,GAAAC,SAAA,CAAAJ,MAAA,QAAAI,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;EAAA,OACvCX,YAAY,CAACC,QAAQ,EAAES,IAAI,EAAEf,MAAM,CAAC;AAAA;AACtC,IAAIqB,MAAM,GAAG,SAATA,MAAMA,CAAA;EAAA,IAAIN,IAAI,GAAAC,SAAA,CAAAJ,MAAA,QAAAI,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;EAAA,OACrBd,MAAM,CAACC,eAAe,CAAC,IAAIC,UAAU,CAACW,IAAI,CAAC,CAAC,CAACO,MAAM,CAAC,UAACJ,EAAE,EAAEK,IAAI,EAAK;IAChEA,IAAI,IAAI,EAAE;IACV,IAAIA,IAAI,GAAG,EAAE,EAAE;MACbL,EAAE,IAAIK,IAAI,CAACC,QAAQ,CAAC,EAAE,CAAC;IACzB,CAAC,MAAM,IAAID,IAAI,GAAG,EAAE,EAAE;MACpBL,EAAE,IAAI,CAACK,IAAI,GAAG,EAAE,EAAEC,QAAQ,CAAC,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC;IAC9C,CAAC,MAAM,IAAIF,IAAI,GAAG,EAAE,EAAE;MACpBL,EAAE,IAAI,GAAG;IACX,CAAC,MAAM;MACLA,EAAE,IAAI,GAAG;IACX;IACA,OAAOA,EAAE;EACX,CAAC,EAAE,EAAE,CAAC;AAAA;AACR,SAASG,MAAM,EAAED,cAAc,EAAEf,YAAY,EAAEN,WAAW,EAAEC,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}