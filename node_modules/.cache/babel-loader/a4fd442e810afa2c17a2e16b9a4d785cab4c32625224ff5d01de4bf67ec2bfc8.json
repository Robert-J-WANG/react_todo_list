{"ast":null,"code":"import _objectSpread from\"/Users/aqiang/Desktop/My_Github/Upload/ReactProject/react_todo_list/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"/Users/aqiang/Desktop/My_Github/Upload/ReactProject/react_todo_list/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _classCallCheck from\"/Users/aqiang/Desktop/My_Github/Upload/ReactProject/react_todo_list/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/aqiang/Desktop/My_Github/Upload/ReactProject/react_todo_list/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/Users/aqiang/Desktop/My_Github/Upload/ReactProject/react_todo_list/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/aqiang/Desktop/My_Github/Upload/ReactProject/react_todo_list/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import React,{Component}from'react';import Header from'./components/Header';import List from'./components/List';import Footer from'./components/Footer';import'./App.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);var _super=_createSuper(App);function App(){var _this;_classCallCheck(this,App);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));// 动态数据保存在复组件App中，这样，就能给每个子组件以props的方式传递，要不，子组件Header 和List之间是兄弟关系，暂时的技术无法传递数据\n//  状态在那里，操作状态的方法就在那里\n// 初始化状态\n_this.state={todos:[{id:\"001\",name:'Food',done:true},{id:\"002\",name:'Shopping',done:false},{id:\"003\",name:'Swimming',done:true},{id:\"004\",name:'Coding',done:false}]};// addTodo 用于添加一个todo，接收的参数是一个todo对象\n_this.addTodo=function(todoObj){// 获取原状态里的对象数组\nvar todos=_this.state.todos;// 追加一个新的对象\nvar newTodos=[todoObj].concat(_toConsumableArray(todos));// 更新状态\n_this.setState({todos:newTodos});};// updateTodo 用于更新itme的状态\n_this.updateTodo=function(id,done){// 获取原状态数据\nvar todos=_this.state.todos;// 加工数据\nvar newTodos=todos.map(function(todoObj){if(todoObj.id===id){return _objectSpread(_objectSpread({},todoObj),{},{done:done});// 复制原对象，并修改done属性值\n}else{return todoObj;//\n}});// 更新状态值\n_this.setState({todos:newTodos});};// deleteTodo 用于删除一个ToDo\n_this.deleteTodo=function(id){// 获取原状态数据\nvar todos=_this.state.todos;// 过滤数组对象，返回id不等于被选中ToDo的其他对象\nvar newTodos=todos.filter(function(todoObj){return todoObj.id!==id;});// 更新状态\n_this.setState({todos:newTodos});};// checkAllTodos 用于全选\n_this.checkAllTodos=function(done){// 获取原来的状态\nvar todos=_this.state.todos;// 加工数据\nvar newTodos=todos.map(function(todoObj){return _objectSpread(_objectSpread({},todoObj),{},{done:done});});// 更新数据\n_this.setState({todos:newTodos});};// clearAllDone 用于全部完成的\n_this.clearAllDone=function(){// 获取原来的状态\nvar todos=_this.state.todos;// 加工数据\nvar newTodos=todos.filter(function(todoObj){return!todoObj.done;});// 更新数据\n_this.setState({todos:newTodos});};return _this;}_createClass(App,[{key:\"render\",value:function render(){// 定义一个对象，对象里有1个属性todos，然后将对象this.state赋值给自定的对象\nvar todos=this.state.todos;// 不能写成this.state.todos\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{className:\"todo-title \",children:\"My Todo List\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"todo-container \",children:[/*#__PURE__*/_jsx(Header,{addTodo:this.addTodo}),/*#__PURE__*/_jsx(List,{todolists:todos,updateTodo:this.updateTodo,deleteTodo:this.deleteTodo}),/*#__PURE__*/_jsx(Footer,{todos:todos,checkAllTodos:this.checkAllTodos,clearAllDone:this.clearAllDone})]})]});}}]);return App;}(Component);export{App as default};","map":{"version":3,"names":["React","Component","Header","List","Footer","jsx","_jsx","jsxs","_jsxs","App","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","todos","id","name","done","addTodo","todoObj","newTodos","_toConsumableArray","setState","updateTodo","map","_objectSpread","deleteTodo","filter","checkAllTodos","clearAllDone","_createClass","key","value","render","children","className","todolists","default"],"sources":["/Users/aqiang/Desktop/My_Github/Upload/ReactProject/react_todo_list/src/App.js"],"sourcesContent":["import React, { Component } from 'react'\nimport Header from './components/Header'\nimport List from './components/List'\nimport Footer from './components/Footer'\n\nimport './App.css'\n\nexport default class App extends Component {\n\n  // 动态数据保存在复组件App中，这样，就能给每个子组件以props的方式传递，要不，子组件Header 和List之间是兄弟关系，暂时的技术无法传递数据\n\n  //  状态在那里，操作状态的方法就在那里\n\n  // 初始化状态\n  state = {\n    todos: [\n      { id: \"001\", name: 'Food', done: true },\n      { id: \"002\", name: 'Shopping', done: false },\n      { id: \"003\", name: 'Swimming', done: true },\n      { id: \"004\", name: 'Coding', done: false },\n    ]\n  }\n\n  // addTodo 用于添加一个todo，接收的参数是一个todo对象\n  addTodo = (todoObj) => {\n    // 获取原状态里的对象数组\n    const { todos } = this.state\n    // 追加一个新的对象\n    const newTodos = [todoObj, ...todos]\n    // 更新状态\n    this.setState({ todos: newTodos });\n  }\n\n  // updateTodo 用于更新itme的状态\n  updateTodo = (id, done) => {\n    // 获取原状态数据\n    const { todos } = this.state\n    // 加工数据\n    const newTodos = todos.map((todoObj) => {\n      if (todoObj.id === id) {\n        return { ...todoObj, done: done }// 复制原对象，并修改done属性值\n      }\n      else {\n        return todoObj; //\n      }\n    })\n    // 更新状态值\n    this.setState({ todos: newTodos })\n  }\n\n  // deleteTodo 用于删除一个ToDo\n  deleteTodo = (id) => {\n    // 获取原状态数据\n    const { todos } = this.state;\n    // 过滤数组对象，返回id不等于被选中ToDo的其他对象\n    const newTodos = todos.filter((todoObj) => {\n      return (todoObj.id !== id)\n    })\n    // 更新状态\n    this.setState({ todos: newTodos });\n  }\n\n  // checkAllTodos 用于全选\n  checkAllTodos = (done) => {\n    // 获取原来的状态\n    const { todos } = this.state;\n    // 加工数据\n    const newTodos = todos.map((todoObj) => {\n      return { ...todoObj, done: done }\n    })\n    // 更新数据\n    this.setState({ todos: newTodos })\n  }\n  // clearAllDone 用于全部完成的\n  clearAllDone = () => {\n    // 获取原来的状态\n    const { todos } = this.state\n    // 加工数据\n    const newTodos = todos.filter((todoObj) => {\n      return !todoObj.done\n    })\n    // 更新数据\n    this.setState({ todos: newTodos })\n\n  }\n  render() {\n\n    // 定义一个对象，对象里有1个属性todos，然后将对象this.state赋值给自定的对象\n    const { todos } = this.state; // 不能写成this.state.todos\n\n    return (\n      <div>\n        <h2 className=\"todo-title \">My Todo List</h2>\n        <div className=\"todo-container \">\n          {/*step 2， 子组件Header需要传递数据给父组件App:\n                            1, 通过父组件使用props的方式，给子组件传递一个函数\n                            2，子组件调用此函数，将数据通过函数参数的形式传递给父组件\n                */}\n          <Header addTodo={this.addTodo} />\n          {/*step 1， 父组件App通过，设置props的方式，将数据传递给子组件List*/}\n          <List todolists={todos} updateTodo={this.updateTodo} deleteTodo={this.deleteTodo} />\n          <Footer todos={todos} checkAllTodos={this.checkAllTodos} clearAllDone={this.clearAllDone} />\n        </div>\n      </div>\n    )\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}