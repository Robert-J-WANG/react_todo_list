{"ast":null,"code":"var _jsxFileName = \"/Users/aqiang/Desktop/My_Github/Upload/ReactProject/react_todo_list/src/App.js\";\nimport React, { Component } from 'react';\nimport Header from './components/Header';\nimport List from './components/List';\nimport Footer from './components/Footer';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends Component {\n  constructor() {\n    super(...arguments);\n    // 动态数据保存在复组件App中，这样，就能给每个子组件以props的方式传递，要不，子组件Header 和List之间是兄弟关系，暂时的技术无法传递数据\n    //  状态在那里，操作状态的方法就在那里\n    // 初始化状态\n    this.state = {\n      todos: [{\n        id: \"001\",\n        name: 'Food',\n        done: true\n      }, {\n        id: \"002\",\n        name: 'Shopping',\n        done: false\n      }, {\n        id: \"003\",\n        name: 'Swimming',\n        done: true\n      }, {\n        id: \"004\",\n        name: 'Coding',\n        done: false\n      }]\n    };\n    // addTodo 用于添加一个todo，接收的参数是一个todo对象\n    this.addTodo = todoObj => {\n      // 获取原状态里的对象数组\n      const {\n        todos\n      } = this.state;\n      // 追加一个新的对象\n      const newTodos = [todoObj, ...todos];\n      // 更新状态\n      this.setState({\n        todos: newTodos\n      });\n    };\n    // updateTodo 用于更新itme的状态\n    this.updateTodo = (id, done) => {\n      // 获取原状态数据\n      const {\n        todos\n      } = this.state;\n      // 加工数据\n      const newTodos = todos.map(todoObj => {\n        if (todoObj.id === id) {\n          return {\n            ...todoObj,\n            done: done\n          }; // 复制原对象，并修改done属性值\n        } else {\n          return todoObj; //\n        }\n      });\n      // 更新状态值\n      this.setState({\n        todos: newTodos\n      });\n    };\n    // deleteTodo 用于删除一个ToDo\n    this.deleteTodo = id => {\n      // 获取原状态数据\n      const {\n        todos\n      } = this.state;\n      // 过滤数组对象，返回id不等于被选中ToDo的其他对象\n      const newTodos = todos.filter(todoObj => {\n        return todoObj.id !== id;\n      });\n      // 更新状态\n      this.setState({\n        todos: newTodos\n      });\n    };\n    // checkAllTodos 用于全选\n    this.checkAllTodos = done => {\n      // 获取原来的状态\n      const {\n        todos\n      } = this.state;\n      // 加工数据\n      const newTodos = todos.map(todoObj => {\n        return {\n          ...todoObj,\n          done: done\n        };\n      });\n      // 更新数据\n      this.setState({\n        todos: newTodos\n      });\n    };\n    // clearAllDone 用于全部完成的\n    this.clearAllDone = () => {\n      // 获取原来的状态\n      const {\n        todos\n      } = this.state;\n      // 加工数据\n      const newTodos = todos.filter(todoObj => {\n        return !todoObj.done;\n      });\n      // 更新数据\n      this.setState({\n        todos: newTodos\n      });\n    };\n  }\n  render() {\n    // 定义一个对象，对象里有1个属性todos，然后将对象this.state赋值给自定的对象\n    const {\n      todos\n    } = this.state; // 不能写成this.state.todos\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"todo-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"g-polygon g-polygon-1\",\n          children: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"g-polygon g-polygon-2\",\n          children: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"g-polygon g-polygon-3\",\n          children: \"3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"todo-wrap\",\n          children: [/*#__PURE__*/_jsxDEV(Header, {\n            addTodo: this.addTodo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(List, {\n            todolists: todos,\n            updateTodo: this.updateTodo,\n            deleteTodo: this.deleteTodo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Footer, {\n            todos: todos,\n            checkAllTodos: this.checkAllTodos,\n            clearAllDone: this.clearAllDone\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","Header","List","Footer","jsxDEV","_jsxDEV","App","constructor","arguments","state","todos","id","name","done","addTodo","todoObj","newTodos","setState","updateTodo","map","deleteTodo","filter","checkAllTodos","clearAllDone","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","todolists"],"sources":["/Users/aqiang/Desktop/My_Github/Upload/ReactProject/react_todo_list/src/App.js"],"sourcesContent":["import React, { Component } from 'react'\nimport Header from './components/Header'\nimport List from './components/List'\nimport Footer from './components/Footer'\n\nimport './App.css'\n\nexport default class App extends Component {\n\n  // 动态数据保存在复组件App中，这样，就能给每个子组件以props的方式传递，要不，子组件Header 和List之间是兄弟关系，暂时的技术无法传递数据\n\n  //  状态在那里，操作状态的方法就在那里\n\n  // 初始化状态\n  state = {\n    todos: [\n      { id: \"001\", name: 'Food', done: true },\n      { id: \"002\", name: 'Shopping', done: false },\n      { id: \"003\", name: 'Swimming', done: true },\n      { id: \"004\", name: 'Coding', done: false },\n    ]\n  }\n\n  // addTodo 用于添加一个todo，接收的参数是一个todo对象\n  addTodo = (todoObj) => {\n    // 获取原状态里的对象数组\n    const { todos } = this.state\n    // 追加一个新的对象\n    const newTodos = [todoObj, ...todos]\n    // 更新状态\n    this.setState({ todos: newTodos });\n  }\n\n  // updateTodo 用于更新itme的状态\n  updateTodo = (id, done) => {\n    // 获取原状态数据\n    const { todos } = this.state\n    // 加工数据\n    const newTodos = todos.map((todoObj) => {\n      if (todoObj.id === id) {\n        return { ...todoObj, done: done }// 复制原对象，并修改done属性值\n      }\n      else {\n        return todoObj; //\n      }\n    })\n    // 更新状态值\n    this.setState({ todos: newTodos })\n  }\n\n  // deleteTodo 用于删除一个ToDo\n  deleteTodo = (id) => {\n    // 获取原状态数据\n    const { todos } = this.state;\n    // 过滤数组对象，返回id不等于被选中ToDo的其他对象\n    const newTodos = todos.filter((todoObj) => {\n      return (todoObj.id !== id)\n    })\n    // 更新状态\n    this.setState({ todos: newTodos });\n  }\n\n  // checkAllTodos 用于全选\n  checkAllTodos = (done) => {\n    // 获取原来的状态\n    const { todos } = this.state;\n    // 加工数据\n    const newTodos = todos.map((todoObj) => {\n      return { ...todoObj, done: done }\n    })\n    // 更新数据\n    this.setState({ todos: newTodos })\n  }\n  // clearAllDone 用于全部完成的\n  clearAllDone = () => {\n    // 获取原来的状态\n    const { todos } = this.state\n    // 加工数据\n    const newTodos = todos.filter((todoObj) => {\n      return !todoObj.done\n    })\n    // 更新数据\n    this.setState({ todos: newTodos })\n\n  }\n  render() {\n\n    // 定义一个对象，对象里有1个属性todos，然后将对象this.state赋值给自定的对象\n    const { todos } = this.state; // 不能写成this.state.todos\n\n    return (\n      <div className=\"todo-container\">\n        <div className=\"todo-container\">\n          {/*for setting background css  */}\n          <div className=\"g-polygon g-polygon-1\">1</div>\n          <div className=\"g-polygon g-polygon-2\">2</div>\n          <div className=\"g-polygon g-polygon-3\">3</div>\n\n          <div className=\"todo-wrap\">\n            {/*step 2， 子组件Header需要传递数据给父组件App:\n                            1, 通过父组件使用props的方式，给子组件传递一个函数\n                            2，子组件调用此函数，将数据通过函数参数的形式传递给父组件\n                */}\n            <Header addTodo={this.addTodo} />\n            {/*step 1， 父组件App通过，设置props的方式，将数据传递给子组件List*/}\n            <List todolists={todos} updateTodo={this.updateTodo} deleteTodo={this.deleteTodo} />\n            <Footer todos={todos} checkAllTodos={this.checkAllTodos} clearAllDone={this.clearAllDone} />\n          </div>\n        </div>\n      </div>\n\n    )\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}